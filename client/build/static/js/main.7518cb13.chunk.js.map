{"version":3,"sources":["Messages.js","Users.js","Emotes.js","App.js","index.js"],"names":["Messages","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","id","messages","map","item","index","key","toString","Component","Users","users","Emotes","_this","emotes","onClick","sendEmote","socket","io","App","state","alias","message","isLoggedIn","emotesVisible","kicked","handleMessageSubmit","bind","assertThisInitialized","handleAliasSubmit","handleAliasChange","handleMessageChange","updateMessages","updateUsers","handleEmoteSubmit","showEmotes","on","msg","setState","toggle","timeOfMessage","Date","toTimeString","substr","currentMessages","emote","push","e","preventDefault","emit","alert","loggedIn","emoteIndex","target","value","notKicked","className","Messages_Messages","Users_Users","onSubmit","type","placeholder","onChange","Emotes_Emotes","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7518cb13.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Messages extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <ul id=\"messageList\">\r\n                { this.props.messages && //check that messages is not empty first\r\n                    this.props.messages.map((item, index) => //generate a list HTML tag for each item where item consists of [user, message]\r\n                        <li key={index}> \r\n                            <b>{item[2]}</b> {item[0].toString()}: {item[1].toString()} \r\n                        </li> \r\n                    )}\r\n            </ul>       \r\n        )\r\n    }\r\n}\r\n\r\nexport { Messages };","import React, { Component } from 'react';\r\n\r\nclass Users extends Component{\r\n    \r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <ul id=\"userList\">\r\n                { this.props.users && //check that messages is not empty first\r\n                    this.props.users.map((item, index) => //generate a list HTML tag for each item where item consists of [user, message]\r\n                        <li key={index}> \r\n                            {item.toString()}\r\n                        </li> \r\n                    )}\r\n            </ul>       \r\n        )\r\n    }\r\n}\r\n\r\nexport { Users };","import React, {Component} from 'react';\r\nimport {emotes} from './App';\r\n\r\nclass Emotes extends Component{\r\n    constructor(props){\r\n        super(props)\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div id=\"emoteButtons\">\r\n            { emotes && \r\n                    emotes.map((item, index) => \r\n                        <button onClick={() => this.props.sendEmote(index)} key={index}>{item}</button>\r\n                    )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport {Emotes};","import React, { Component } from 'react';\nimport { Messages } from './Messages';\nimport { Users } from './Users';\nimport { Emotes } from './Emotes';\nimport io from 'socket.io-client/dist/socket.io';\n\n//document domain corresponds to the url in the browser\n//in our case it may be localhost when developing\n//and somewhere on heroku for deployment\nvar socket = io(`https://chat4318.herokuapp.com:5000`);\nconst emotes = ['◕‿◕', 'ლ(´ڡ`ლ)', '(ಥ﹏ಥ)', '(づ￣ ³￣)づ', '¯\\_(ツ)_/¯','╭∩╮(-_-)╭∩╮', '(づ｡◕‿‿◕｡)づ', 'ఠ_ఠ', '◔̯◔', 'ಠ益ಠ', '( ‘-’)人(ﾟ_ﾟ )'];\nexport {emotes};\n\nclass App extends Component {\n  constructor(){\n    super()\n    \n    //create state for component\n    this.state ={\n      messages: [],\n      alias: '',\n      message: '',\n      isLoggedIn: false,\n      users: [],\n      emotesVisible: false,\n      kicked: false,\n    }\n\n    //bind functions to this object\n    this.handleMessageSubmit = this.handleMessageSubmit.bind(this);\n    this.handleAliasSubmit = this.handleAliasSubmit.bind(this);\n    this.handleAliasChange = this.handleAliasChange.bind(this);\n    this.handleMessageChange = this.handleMessageChange.bind(this);\n    this.updateMessages = this.updateMessages.bind(this);\n    this.updateUsers = this.updateUsers.bind(this);\n    this.handleEmoteSubmit = this.handleEmoteSubmit.bind(this);\n    this.showEmotes = this.showEmotes.bind(this);\n\n    //instantiate socket events\n    socket.on('connect', function() {\n    });\n\n    //received a new message\n    socket.on('server message', (msg) => {\n      this.updateMessages(msg);\n    });\n\n    socket.on('new user', (users) => {\n      this.updateUsers(users);\n    });\n\n    socket.on('admin kick', () => {\n      this.setState({kicked: true})\n    });\n  }\n\n  //functions to update state\n  ///////////////////////////\n  showEmotes(){\n    let toggle = !(this.state.emotesVisible);\n    this.setState({emotesVisible:toggle});\n  }\n\n  updateMessages(message){\n    //update the messages in state to include\n    //the message passed as a parameter\n    let timeOfMessage = (new Date()).toTimeString().substr(0,5)//date.format(\"hh:mm:ss tt\")\n    let currentMessages = this.state.messages;\n\n    //check if message is an emote \n    if ('emote' in message){\n      message.message = emotes[message.emote] \n    }\n\n    currentMessages.push([message.alias, message.message, timeOfMessage]);\n    this.setState({messages:currentMessages});\n  }\n\n  updateUsers(users){\n    this.setState({users:users.users});\n  }\n  ///////////////////////////\n  \n\n  //functions to handle button submits\n  ///////////////////////////\n  handleMessageSubmit(e){\n    //extract data from html form and emit\n    //to socket code on backend\n    e.preventDefault()\n    let alias = this.state.alias;\n    let message = this.state.message;\n    if (!message){\n      alert('Message must not be empty');\n      return;\n    }\n    socket.emit('send message', {\n      alias: alias,\n      message: message\n    });\n    this.setState({ message: '' }); //clear message for user after sending\n  }\n\n  handleAliasSubmit(e){\n    //extract data from html form and emit\n    //to socket code on backend\n    let alias = this.state.alias\n    if (!alias){\n      alert('Alias must not be empty');\n      return;\n    }\n    socket.emit( 'user login', {\n      alias : alias,\n    });\n    this.setState({\n      loggedIn: true\n    })\n  }\n\n  handleEmoteSubmit(emoteIndex){\n    let alias = this.state.alias;\n    socket.emit('send emote', {\n      alias: alias,\n      emote: emoteIndex\n    });\n  }\n  ///////////////////////////\n\n  //functions to keep react state consistent\n  //with current input\n  handleAliasChange(e){ this.setState({alias:e.target.value}); } //as user types, update state to reflect change\n  handleMessageChange(e){ this.setState({message:e.target.value}); } //as user types, update state to reflect change\n\n\n  render() {\n    let isLoggedIn = this.state.loggedIn;\n    let notKicked = !this.state.kicked;\n    let messages = this.state.messages;\n    let users = this.state.users;\n\n    return (\n      <div className=\"App\">\n        { notKicked ? (\n           isLoggedIn ? ( //isLoggedIn is true\n            <div>\n              <div id=\"banner\">\n                   <h1> Start chatting! </h1>\n              </div>\n              <div id=\"messageWrapper\">\n                <Messages messages={messages}/> \n              </div>\n              <div id=\"userWrapper\">\n                <Users users={users}/>\n              </div>\n              <div id=\"chatInputWrapper\">\n                <form id=\"chatInput\" onSubmit={this.handleMessageSubmit}>\n                  <input id=\"input\" type=\"text\" placeholder=\"Message\" value={this.state.message} onChange={this.handleMessageChange}/>\n                  <input id=\"inputButton\" type=\"submit\" value=\"send\"/> \n                  <button id=\"showEmoteButton\" type=\"button\" onClick={this.showEmotes}>Emotes</button>\n                </form>\n              </div>\n              <div id=\"emoteWrapper\">\n                <div>\n                  {this.state.emotesVisible && <Emotes sendEmote={this.handleEmoteSubmit}/>} \n                </div>\n              </div>\n            </div>\n            ):( //isLoggedIn is false\n              <div id=\"aliasScreen\">\n                <div id=\"welcomeText\">\n                  <h1> Pick an alias to start chatting. </h1>\n                </div>\n                <div id=\"aliasInputWrapper\">\n                  <form id=\"chatInput\" onSubmit={this.handleAliasSubmit}>\n                    <input type=\"text\" placeholder=\"Alias\" value={this.state.alias} onChange={this.handleAliasChange}/>\n                    <input type=\"submit\" value=\"send\"/> \n                  </form>\n                </div>\n              </div>\n          )\n        ) : (\n          <div><h1>Kicked</h1></div>\n        )}\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}